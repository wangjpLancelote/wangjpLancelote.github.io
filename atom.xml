<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我曾寻找钥匙多年,但那扇门一直开着</title>
  <icon>https://www.gravatar.com/avatar/6bf6e5e258abfd12bf462e4a2db4ea0b</icon>
  
  <link href="https://wangjplancelote.github.io/atom.xml" rel="self"/>
  
  <link href="https://wangjplancelote.github.io/"/>
  <updated>2024-05-13T09:40:29.470Z</updated>
  <id>https://wangjplancelote.github.io/</id>
  
  <author>
    <name>Lancelote</name>
    <email>wjp19951024@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重新出发——艰难职场之路</title>
    <link href="https://wangjplancelote.github.io/2024/05/13/%E9%87%8D%E6%96%B0%E5%87%BA%E5%8F%91/"/>
    <id>https://wangjplancelote.github.io/2024/05/13/%E9%87%8D%E6%96%B0%E5%87%BA%E5%8F%91/</id>
    <published>2024-05-13T09:39:50.333Z</published>
    <updated>2024-05-13T09:40:29.470Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>聚合器(Yearn)</title>
    <link href="https://wangjplancelote.github.io/2024/03/29/%E8%81%9A%E5%90%88%E5%99%A8Yearn/"/>
    <id>https://wangjplancelote.github.io/2024/03/29/%E8%81%9A%E5%90%88%E5%99%A8Yearn/</id>
    <published>2024-03-29T03:52:13.278Z</published>
    <updated>2024-03-29T03:52:46.622Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">DeFi</span>聚合器<span class="title class_">Yearn</span>项目出现原因，源自于<span class="title class_">DeFi</span>项目的泛滥与治理币诞生，海量的交易导致以太坊的<span class="title class_">Gas</span>飙升</span><br></pre></td></tr></table></figure><p>什么是聚合器：</p><p>当 N 多个 DeFi 项目同时 Farm 或者 Mint，项目方发行了一些名为治理币的激励，本意是为了在 DeFi 项目中利用治理币做一些投票来共同管理社区（即投票），结果现在这些治理币的出现，导致以太坊的 Gas Fee 居高不下（因为要获得这些代币就需要进行交易）</p><p>这个时候就希望有一种项目，能够解决在很多个项目的池子中自动根据算法决定将钱投入到哪里，挖出来的钱是继续放进池子还是卖掉，怎么卖，什么时候卖，最好放进这个项目池子的项目还能根据份额分红等这些问题。这中项目就称之为：<strong>聚合器</strong></p><p>聚合器可以理解为 DeFi 中的基金，只需要一股脑把钱放进去，具体怎么做，由基金经理处理（这里就是算法和合约），并且聚合器也会有治理币，把钱放在聚合器的池子里不仅能分红，还能挖矿（万物皆有挖矿机制）</p><p>显然：聚合器 Yearn 项目因其简单的操作，自然而然的成为了 DeFi 领域的明星，用户根本不需要下载那么多 App，关注那些 DApp 的操作方式，只需要准备好钱，放进 Yearn 中，就有源源不断的收益，发行的代币 YFI 也节节攀升，在 Yearn 项目爆火的同时，会在同时抬高了其他 DeFi 项目的币价</p><p>仿盘：</p><p>仿盘就是 fork 了 Uniswap 代码，修改了其中合约的参数的类 swap 项目，为什么是 Uniswap，因为 Uniswap 是最早和最著名采用 AMM 的 DEX，同时也是开源的。但是 AMM 的问题在于需要有大量的资金来提供流动性才能变得好用，如果交易量上不去，分红就上不去，于是也没有足够的奖励来吸引那么多的资金来提供流动性。</p><p>这个时候就出现了 Compound 搞出来的治理币和流动性挖矿</p><p>Compound 的出现可以说大大激活了 DeFi 的市场，不一样的玩法，高额的收益，使得流动性越来越高，但是，很快，这种局面就被打破了，<strong>SushiSwap</strong>出现了</p><p>SushiSwap，复制了 Uniswap 的代码，但是加入了治理币和流动性挖矿，可以说是 UniSwap 和 Compound 的结合，除此之外，还照搬了 Uniswap 的 logo，很直接的向世界宣布自己就是 Uniswap 的复制品，所有的智能合约都是照抄的，但是宣称自己是更好的 Uniswap，因为加入了流动性挖矿，因为自己发行治理币。</p><p>为什么这么说，流动性挖矿是要有人注入流动性，也就是需要充钱到池子里才给用户发币，但是 Sushiswap 的做法是：给池子里注入流动性，就给发币，但是只有两周时间，两周后还想要币，只需要把钱放到池子里（不需要其他用户发生交易即可）。</p><p>什么意思呢，本来流动性挖矿是需要用户发生交易之后，swap 抽取利率作为激励发放对应的奖励给用户（也就是币），但是现在 sushiswap 只需要用户将钱放到池子里，就会给用户发代币（sushi），用户什么都不用干就会有收益，唯一需要担心的是 sushi 代币的价值，这是无本万利的事。而且 sushi 火了的话，肯定会有更多人将钱投到 sushiswap 里，流动性也上来了，交易量也会上来，注意，sushiswap 和 Uniswap 一模一样，这时候流动性挖矿的收益也是水涨船高，于是 Sushiswap 凭借这种策略，顺利的让其暴涨，吸收了天量的资金，既然 sushiswap 成功了，自然而然的会带动其他的一些仿盘项目（食物系，，什么 Salmon，Taco，Pasta 等），这类项目就是仿盘的起源。</p><p>后发的项目怎么能和先发的项目竞争呢，sushiswap 是第一个吃螃蟹的人，后续的仿盘都是出道即巅峰，马上就消失不见。没有金融创新，是吸收不到资金的。也有一些创新针对的是预挖项目币的情况，因为大部分的项目在发行的时候，会提前给开发团队，或者 VC 一些币，这是给先进入的人的优势回报，这就是预挖，但是，这样就会让后来进入的人没有足够的回报，因此诞生了 YFII，也是 copy 的 YFI 的仿盘项目，但是 YFII 没有预挖，而是直接将钱分给用户。因为没有开发团队，没有投资者，所有的代码都是从公链上拿下来的，完全没有成本。</p><p>这些也是仿盘的优势：没有开发团队，没有代码审计，没有投资人，，没有代码审计就是最大的问题，仿盘没有一个正经的开发团队，没有投资人，就意味着会走向失控。换句话说，这不是仿盘带来的风险，而是 DeFi 的结构性问题。</p><p>明星项目 YAM 就是 Yearn 的仿盘，调整了代币的分配策略，动态调整机制能够发新币吸引新人加入。但是 YAM 的代码 bug 导致了整个项目上线即崩盘。</p><p>这也是 DeFi 项目中的智能合约 bug，一旦智能合约出现 bug，那么不管是不是仿盘都会出问题。这是代码审计的问题。</p><p>以上总总，DeFi 就算有再多的问题，但是最大价值就在于，去中心化总是对的，但去中心化交易所不一定是好的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Recoil解决了什么问题</title>
    <link href="https://wangjplancelote.github.io/2024/03/27/Recoli/"/>
    <id>https://wangjplancelote.github.io/2024/03/27/Recoli/</id>
    <published>2024-03-27T03:59:24.862Z</published>
    <updated>2024-03-27T06:15:16.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Recoil"><a href="#Recoil" class="headerlink" title="Recoil"></a>Recoil</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Recoil&quot;&gt;&lt;a href=&quot;#Recoil&quot; class=&quot;headerlink&quot; title=&quot;Recoil&quot;&gt;&lt;/a&gt;Recoil&lt;/h1&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端项目部署</title>
    <link href="https://wangjplancelote.github.io/2024/03/26/%E5%89%8D%E7%AB%AF%E9%83%A8%E7%BD%B2/"/>
    <id>https://wangjplancelote.github.io/2024/03/26/%E5%89%8D%E7%AB%AF%E9%83%A8%E7%BD%B2/</id>
    <published>2024-03-26T07:55:09.777Z</published>
    <updated>2024-03-26T07:56:17.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大公司如何开发部署前端代码"><a href="#大公司如何开发部署前端代码" class="headerlink" title="大公司如何开发部署前端代码"></a>大公司如何开发部署前端代码</h1><blockquote><p>多人协作模式下的前端代码开发、超大流量访问下的前端应用的部署</p></blockquote><ul><li>多人协作开发<br>这个比较基础、主要是代码管理方面，使用 git 或者 svn，按照一定的 flow，如从 dev 分支下切新分支进行开发、开发完成之后提测，发起合并请求，合并到测试分支，当测试完成之后继续提交合并请求，上线</li><li>大型网站主站的前端应用部署<br>分析一下，部署前端代码到底做了什么呢？<br>主要做的事情就是将静态文件如 index.html、index.js、index.css 放到具体的静态资源服务器上，常见的如 nginx，随后重启服务，部署就完成了，用户要访问最新的应用，刷新页面就可以了，这个过程非常简单。<br>但是问题来了，如果一个网站流量非常大，这样做的话就会出现，光是这三个文件(实际上远不止三个文件)的加载消耗的流量就是天量的数字，非常浪费性能。通常这种问题我们会想到利用浏览器的缓存机制来优化，事实上浏览器的缓存就是这么用的<ol><li><p>304 协商缓存</p><p>协商缓存还是存在一次与服务器通信过程，我们的目的就是彻底取消与服务器的通信，因此放弃</p></li><li><p>强缓存</p><p>强缓存倒是不用通信了，但是不和服务器通信的话，如何更新资源呢，毕竟每次更新的目的都是要让用户去使用我们的产品，这时候可以用更新文件资源路径来让浏览器主动放弃缓存，每一次更新，都自动更新链接地址</p></li></ol><p>以上第二种方式可以达到我们的目的，但是也存在一个问题，我们每次更新不能修改所有的文件链接地址，需要知道当前的更新是哪个文件，并且只修改对应的文件地址就好了</p><blockquote><p>更新对应修改文件的链接地址</p></blockquote></li></ul><p>如何知道修改了哪个静态资源文件呢，也就是什么东西与文件内容有关呢，可以利用 Hash 算法，将文件内容 hash 成一个字符串内容，hash 算法可以根据每次不同的文件内容生成不同字符串，因此就达到了控制单文件粒度的目的。</p><p>这个对文件内容 hash 化的过程，通常是由构建工具完成的，如 webpack、vite、rollup 等等在打包 build 的时候就会处理好，继而将对应的文件路径添加到 html 中。</p><aside>💡 如果要再继续优化网站性能呢</aside><p>使用 CDN，内容分发网络，将静态资源和动态网页分集群部署，具体是将需要部署的网站主站页面 index.html（动态网页）部署到部署服务器中，将网页包含的静态资源（如 a.js，b.css）部署到 CDN 节点上，最后将 CDN 映射的域名链接添加到动态网页中。</p><aside>💡 解决完了静态资源和网页的性能问题之后，新的问题出现了，如果同时修改了网页和资源，到底是先部署网页还是先部署资源</aside><ol><li><strong>先部署页面，后部署资源</strong>；那么在二者部署的间隔内，有用户访问页面(大型系统的主站每时每刻都有人访问)，会在新的页面加载旧的资源，除非是手动刷新，否则在资源缓存过期之前，页面会一直执行错误</li><li><strong>先部署资源，后部署页面</strong>；那么在二者部署的间隔内，有旧版本资源本地缓存的用户访问页面，请求的页面也是旧版本的，资源引用没有改变，页面展示正常，而没有本地缓存后者缓存过期的网站，就会出现旧版本页面访问新版本资源的情况，导致页面执行错误（一般是样式错位），除非等到页面部署完成，才能恢复正常。</li></ol><p>以上问题说明，先部署都不行，都会有两者的部署间隔期，如果访问量不大的话，可以在访问低谷期部署，也就是半夜上线，这样对流量访问影响最小，但是大型网站，门户网站，主站这些流量很大且没有明显低谷期的网站，就不能通过这种方式发布了；因此以上的问题的根源就是发布的时候旧资源会被丢弃，导致访问不到对应的内容</p><aside>💡 既然问题是由发布之后访问不同版本资源错位造成的，那么能不能让未刷新页面的人用旧版本资源和页面，新访问的用户访问新版本的资源和页面呢？可以，也就是发布的时候不要覆盖旧版本的内容，这种方式叫非覆盖式发布或者滚动发布</aside><p>内容有修改的文件的资源对其 hash 计算得到一个新的 hash 值，上传到 CDN 节点上，生成成一个新的文件链接发布到线上，不会覆盖已有的资源文件，上线过程中，先全量部署静态资源，再灰度部署页面。问题就解决的差不多了。</p><p>总结下来就是：</p><ul><li>配置超长时间的本地缓存，节省带宽，提高性能</li><li>采用内容摘要作为内容更新的依据，精确控制更新的文件</li><li>静态资源 CDN 部署</li><li>更新资源发布路径采用滚动式发布，平滑升级</li></ul><blockquote><p>发布完之后，如果遇到发布代码有问题，需要马上回滚，最好是秒级会滚，应该如何做呢</p></blockquote><p>重新打包部署不现实，因为这个时间太久了，很有可能用户已经访问了错误的页面，最好的方案是能够切换路由到上一个版本，从入口处解决，这个时候就需要在资源链接上增加一个版本号的概念：?version&#x3D;1.x.x，通过指定渲染哪个版本号的资源就可以达到秒级回滚页面内容的效果。</p><p>这里的 version 号可以根据业务来确定，如每次部署都会有一个业务号，每次部署的业务号自增，需要回滚的时候，只需要根据版本号自动切换即可，这个切换最好是在网关处处理，这也意味着滚动式发布是生产环境的最适合的方案，具有容灾备份的效果。</p><blockquote><p>以上是属于代码 build 之后进行 deploy 的过程，除此之外，部署的过程还有代码完成之后到 build 这个过程，下面就介绍一下这个过程：CiCd</p></blockquote><p>ci&#x2F;cd：持续交付&#x2F;持续部署，意思是新增代码后的自动校验格式，打包，构建，跑单元测试，提供单元测试覆盖率，出具报告，之后在进行代码自动部署，目的是简化重复的工作，且不会出错。</p><p>常见方案：</p><ul><li>Jenkins</li><li>Gitlab-ci actions</li><li>Docker + K8s</li><li>自己搭建构建服务器</li></ul><blockquote><p>线上部署期间，用户长时间没有访问网页等各种情况，有一定概率出现错误<code>Uncaught ChunkLoadError: Loading chunk &lt;CHUNK_NAME&gt; failed.</code> 这个错误是说无法加载资源文件，可能是资源文件名错误,这种情况会导致网页白屏</p></blockquote><p>原因在于现在前端构建工具 webpack 打包出来的项目，主入口(index.html)默认不缓存，其他文件长期缓存，缓存的文件通过改变文件名(hash)来更新，所以在部署期间长期没有访问，会出现请求的资源路径已被删除，或者虽然路径没变，但是 chunk 的内容改变了，导致出现的白屏，</p><p>有一下方案：</p><ul><li>缓存所有版本的文件，空间占用太大</li><li>打包出来的文件不做缓存，对服务器压力很大</li><li>通过 websocket 等轮询的方式主动告知浏览器更新版本，（也就是刷新页面）需要后端支持</li><li>对于报错的文件重试，超过一定次数白屏，主动告知用户刷新页面</li></ul><p>综上，采用最后一种方案</p><p>缓存重试一定次数后弹窗提示用户刷新页面，借助 webpack-retry-chunk-load-plugin 插件和 html-tag-attribute-plugin 插件配合使用</p><p>通常重试的文件不需要全部类型，仅仅需要重试 js 文件即可</p><p><a class="link"   href="https://blog.towavephone.com/cache-error-retry-process/" >Retry-chunk-load 方案<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;大公司如何开发部署前端代码&quot;&gt;&lt;a href=&quot;#大公司如何开发部署前端代码&quot; class=&quot;headerlink&quot; title=&quot;大公司如何开发部署前端代码&quot;&gt;&lt;/a&gt;大公司如何开发部署前端代码&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;多人协作模式下的前端代码开</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Redux-Middleware</title>
    <link href="https://wangjplancelote.github.io/2024/03/26/Redux-middleware/"/>
    <id>https://wangjplancelote.github.io/2024/03/26/Redux-middleware/</id>
    <published>2024-03-26T07:52:52.221Z</published>
    <updated>2024-03-26T07:54:01.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redux-Middleware-解析"><a href="#Redux-Middleware-解析" class="headerlink" title="Redux-Middleware 解析"></a>Redux-Middleware 解析</h1><aside>💡 It provides a third-party extension point between dispatching an action, and the moment it reaches the reducer.</aside><p>以上是 Dan Abramov 对 middleware 的描述，他提供了一个分类处理 action 的机会，在 middleware 中，你可以检阅每一个流过的 action，挑选出特定类型的 action 进行相应操作，给你一次改变 action 的机会，</p><p>看一下使用方法：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Middleware</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">logger</span>: <span class="title class_">Middleware</span> = <span class="function">(<span class="params">store</span>) =&gt;</span> <span class="function">(<span class="params">next</span>) =&gt;</span> <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(action);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">next</span>(action);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 这里用了函数科里化的做法，将每个return的函数都改成一个参数的函数，为了解耦</span></span><br></pre></td></tr></table></figure><p>Middleware 具体是如何实现的呢</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">applyMiddleware</span>(<span class="params">...middlewares</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">createStore</span>) =&gt;</span> <span class="function">(<span class="params">reducer, preloadedState, enhancer</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> store = <span class="title function_">createStore</span>(reducer, preloadedState, enhancer);</span><br><span class="line">    <span class="keyword">var</span> dispatch = store.<span class="property">dispatch</span>;</span><br><span class="line">    <span class="keyword">var</span> chain = [];</span><br><span class="line">    <span class="keyword">var</span> middlewareAPI = &#123;</span><br><span class="line">      <span class="attr">getState</span>: store.<span class="property">getState</span>,</span><br><span class="line">      <span class="attr">dispatch</span>: <span class="function">(<span class="params">action</span>) =&gt;</span> <span class="title function_">dispatch</span>(action),</span><br><span class="line">    &#125;;</span><br><span class="line">    chain = middlewares.<span class="title function_">map</span>(<span class="function">(<span class="params">middleware</span>) =&gt;</span> <span class="title function_">middleware</span>(middlewareAPI));</span><br><span class="line">    dispatch = <span class="title function_">compose</span>(...chain)(store.<span class="property">dispatch</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      dispatch,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>了解一下 compose 函数：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="title function_">compose</span>(f1, f2, f3, f4)(value) -&gt; <span class="keyword">let</span> result = <span class="title function_">f1</span>(<span class="title function_">f2</span>(<span class="title function_">f3</span>(<span class="title function_">f4</span>(value))))</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">chain = middlewares.<span class="title function_">map</span>(<span class="function"><span class="params">middleware</span> =&gt;</span> <span class="title function_">middleware</span>(middlewareAPI))</span><br><span class="line">dispatch = <span class="title function_">compose</span>(...chain)(store.<span class="property">dispatch</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以变化为</span></span><br><span class="line">fnMiddle = <span class="title function_">fn</span>(middlewareAPI)</span><br><span class="line">dispatch = <span class="title function_">fnMiddle</span>(store.<span class="property">dispatch</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//也就是</span></span><br><span class="line">dispatch = <span class="title function_">fn</span>(middlewareAPI)(store.<span class="property">dispatch</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//接着</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(action)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="title function_">fn</span>(middlewareAPI)(store.<span class="property">dispatch</span>)(action)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 那么</span></span><br><span class="line">dispatch = <span class="title function_">compose</span>(...chain)(store.<span class="property">dispatch</span>) === dispatch = <span class="title function_">fn1Middle</span>(<span class="title function_">fn2Middle</span>(store.<span class="property">dispatch</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每一次fnMiddle执行之后，就会返回一个函数</span></span><br><span class="line">(action) =&gt; &#123;</span><br><span class="line">...</span><br><span class="line"><span class="title function_">next</span>(action)</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 到了下一个fnMiddle执行的时候，接受一个传入的action参数，方法体里执行的是next(action)</span></span><br><span class="line"><span class="comment">// 那么，什么事next方法呢，由第一个fnMiddleware执行的时候传入store.dispatch()</span></span><br><span class="line"><span class="comment">// store.dispatch 就作为next函数的方法体</span></span><br><span class="line"><span class="comment">// 也就是，每次的next(action)实际上就是执行的store.dispatch(action)</span></span><br></pre></td></tr></table></figure><p><img   src="https://prod-files-secure.s3.us-west-2.amazonaws.com/43b64f47-9fcc-42a0-ba9a-fbfb1e671f2c/8ad6a082-5e9c-4dc3-828a-a80fb97cd75d/redux.jpeg"  alt="redux.jpeg"></p><p>以上的图示表明，redux 的 middleware 是多层函数包裹结构，每个 middleware 执行完之后，就会将结果返回给下一个 middleware，其中 return 的函数参数为 action，函数体会执行 next(action)，而 next 正是第一次传入 store.dispatch，因为这里是用了 compose 编程思想，将不变的函数参数以科里化的形式作为参数传入，如 store，next，而变化的参数如 action 则作为最后一个参数传入，形如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">middleware = <span class="function">(<span class="params">store</span>) =&gt;</span> <span class="function">(<span class="params">next</span>) =&gt;</span> <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="comment">// store, next 都是不变的函数参数，action作为每个middleware需要处理的对象，最后一个传入</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redux-Middleware-解析&quot;&gt;&lt;a href=&quot;#Redux-Middleware-解析&quot; class=&quot;headerlink&quot; title=&quot;Redux-Middleware 解析&quot;&gt;&lt;/a&gt;Redux-Middleware 解析&lt;/h1&gt;&lt;asid</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Gitlab-Runners 配置</title>
    <link href="https://wangjplancelote.github.io/2024/03/26/runners/"/>
    <id>https://wangjplancelote.github.io/2024/03/26/runners/</id>
    <published>2024-03-26T07:49:43.176Z</published>
    <updated>2024-03-26T07:51:54.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gitlab-runners-流程配置"><a href="#gitlab-runners-流程配置" class="headerlink" title="gitlab-runners 流程配置"></a>gitlab-runners 流程配置</h1><p>项目部署的流程如下:</p><ul><li>将项目打包(build)</li><li>启动 web 服务器（如 nginx）</li><li>将打包后的文件上传到 web 服务器的指定目录下<br>例如：scp -r .&#x2F;buildDir&#x2F;* 目标服务器名称@目标服务器 ip:目标服务器下 nginx 的 root 配置目录，在当前目录下执行</li><li>重启 nginx（或者其他 web 服务器）</li></ul><p>gitlab-CICD 就是要将以上的流程自动化，推送项目代码之后就能自动执行这些流程步骤。</p><p><strong>使用 gitlab-runner 作为执行构建任务的执行器</strong></p><p>首先安装 gitlab-runner</p><ol><li>bash 安装。2. docker 安装。3. 官网安装包下载</li></ol><blockquote><p>bash 安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bash 安装</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install gitlab-runner</span><br></pre></td></tr></table></figure><blockquote><p>docker 安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker 安装</span></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull gitlab/gitlab-runner</span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run -d --name gitlab-runner --restart always \</span><br><span class="line">  -v /opt/gitlab-runner/config:/etc/gitlab-runner \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  gitlab/gitlab-runner:latest</span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it gitlab-runner bash</span><br></pre></td></tr></table></figure><blockquote><p>安装包安装</p></blockquote><p><a class="link"   href="https://docs.gitlab.com/runner/install/linux-repository.html" >https://docs.gitlab.com/runner/install/linux-repository.html<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 版本较低</span></span><br><span class="line">sudo wget -O /usr/local/bin/gitlab-runner https://gitlab-ci-multi-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-ci-multi-runner-linux-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加执行权限</span></span><br><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/gitlab-runner</span><br><span class="line"><span class="comment"># 创建gitlab runner用户</span></span><br><span class="line">sudo useradd --comment <span class="string">&#x27;GitLab Runner&#x27;</span> --create-home gitlab-runner --shell /bin/bash</span><br></pre></td></tr></table></figure><blockquote><p>注册 runner(可注册多个不同 token 的 runners)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">注册gitlab runner</span><br><span class="line"><span class="comment"># 在容器内或者服务器内执行</span></span><br><span class="line">sudo gitlab-runner register</span><br><span class="line"><span class="comment"># 注册过程需要提供一些信息</span></span><br><span class="line">- gitlab 实例的url</span><br><span class="line">- 注册token，可以在gitlab的runner设置页面中获取</span><br><span class="line">- runner的描述</span><br><span class="line">- runner的标签(tags)</span><br><span class="line">- 是否允许runner在没有tag的作业上运行</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>配置 gitlab-runner，在&#x2F;etc&#x2F;gitlab-runner&#x2F;config.toml 文件中进行,主要配置一些并发作业数，日志级别等</p></blockquote><blockquote><p>启动 runner</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-runner start</span><br><span class="line">sudo gitlab-runner restart</span><br></pre></td></tr></table></figure><p>出现以下提示说明已经成功了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime platform  <span class="built_in">arch</span>=amd64 os=linux pid=55297 revision=656c1943 version=16.9.0</span><br></pre></td></tr></table></figure><blockquote><p>验证 runner 配置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-runner verify</span><br></pre></td></tr></table></figure><blockquote><p>runner 设置完成之后，进入到 gitlab，点击查看 CICD 部分，可以看到注册好的 runner，然后在项目中添加配置文件.gitlab-ci.yml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span> <span class="comment"># List of stages for jobs, and their order of execution</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">install</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">NPM_REGISTRY:</span> <span class="string">https://registry.npm.taobao.org</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">$&#123;CI_COMMIT_REF_SLUG&#125;</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">install</span></span><br><span class="line">  <span class="comment"># image: node:latest</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;starting install packages&quot;</span></span><br><span class="line">    <span class="comment"># - npm install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Complete installed packages&quot;</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># 仅在main分支部署</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build-job:</span> <span class="comment"># This job runs in the build stage, which runs first.</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">node:latest</span></span><br><span class="line">  <span class="attr">dependencies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">install-job</span> <span class="comment"># 确保在 build 之前运行 install 作业</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Start Building the code...&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Building Code complete.&quot;</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">out/</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># 仅在main分支部署</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy-job:</span> <span class="comment"># This job runs in the deploy stage.</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span> <span class="comment"># It only runs when *both* jobs in the test stage complete successfully.</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">alpine:latest</span></span><br><span class="line">  <span class="attr">dependencies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">build-job</span></span><br><span class="line">  <span class="attr">before_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27;</span> <span class="string">/etc/apk/repositories</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">apk</span> <span class="string">update</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">apk</span> <span class="string">add</span> <span class="string">--no-cache</span> <span class="string">openssh-client</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">chmod</span> <span class="number">700</span> <span class="string">~/.ssh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;$&#123;SSH_PRIVATE_KEY&#125;&quot;</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ls</span> <span class="string">out/</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Deploying application...&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">scp</span> <span class="string">-r</span> <span class="string">-o</span> <span class="string">&quot;StrictHostKeyChecking=no&quot;</span> <span class="string">./out/*</span> <span class="string">root@10.131.130.113:/home/wiki/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Files copied, restarting Nginx...&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ssh</span> <span class="string">-o</span> <span class="string">&quot;StrictHostKeyChecking=no&quot;</span> <span class="string">$SSH_ROOT@$SSH_HOST</span> <span class="string">&quot;sudo nginx -s reload&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Application successfully deployed.&quot;</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># 仅在main分支部署</span></span><br></pre></td></tr></table></figure><ul><li>配置完成之后，通过 git push origin main 就会触发构建任务<br>install → build → deploy</li></ul><p>deploy 阶段有 scp 和 nginx restart 操作</p><p>scp 首先要在 alpine 镜像构建容器的时候先进行 ssh 密钥对认证</p><ul><li>在容器内部新建.ssh 目录，</li><li>将 gitlab 的秘密变量私钥 SSH_PRIVATE_KEY 复制到.ssh&#x2F;id_rsa 文件，</li><li>在部署服务器中的.ssh&#x2F;authrization_key，添加对应的公钥，目的是为了 ssh 免密码登录</li></ul><p>然后进行 scp 复制构建产物到服务器的对应目录</p><p>重启 web 服务器</p><p>gitlab-runner cicd 流程结束，代码部署成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx.conf示例</span></span><br><span class="line">server &#123;</span><br><span class="line">        listen  8000;</span><br><span class="line">        server_name     localhost;</span><br><span class="line">        charset utf-8;</span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line">        add_header Content-Security-Policy <span class="string">&quot; object-src &#x27;none&#x27;; script-&#x27;self&#x27; &#x27;unsafe-inline&#x27; &quot;</span>;</span><br><span class="line">        add_header  X-Frame-Options SAMEORIGIN;</span><br><span class="line">        add_header X-Content-Type-Options nosniff;</span><br><span class="line">        location / &#123;</span><br><span class="line">          root  /home/wiki; <span class="comment"># /home/wiki 就是前端资源部署的位置</span></span><br><span class="line">          try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">          index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;gitlab-runners-流程配置&quot;&gt;&lt;a href=&quot;#gitlab-runners-流程配置&quot; class=&quot;headerlink&quot; title=&quot;gitlab-runners 流程配置&quot;&gt;&lt;/a&gt;gitlab-runners 流程配置&lt;/h1&gt;&lt;p&gt;项目</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SmartContract(智能合约)</title>
    <link href="https://wangjplancelote.github.io/2024/03/26/smartContract/"/>
    <id>https://wangjplancelote.github.io/2024/03/26/smartContract/</id>
    <published>2024-03-26T07:47:20.055Z</published>
    <updated>2024-03-26T07:48:19.211Z</updated>
    
    <content type="html"><![CDATA[<aside>💡 智能合约是部署在链上的，具有公开透明，不可篡改的特性</aside><p>智能合约是一种运行在以太坊链上的程序，它是位于以太坊区块链上的一个特定地址的一系列代码（函数）和数据（状态）。智能合约也是一个以太坊账户，我们称之为合约账户，这意味着它有余额，可以通过网络进行交易，但是，它无法被人为操控，他们是被部署在去中心化节点上作为网络节点作为程序运行着。个人用户可以通过提交交易执行智能合约的某个函数来与智能合约进行交互。智能合约是一个按照特定规则编写的代码文件，并通过代码自动强制执行。</p><h1 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h1><p>无需许可，任何人都编写智能合约并将其部署到区块链网络上，你只需要学习如何用智能合约编码规则，并且有足够的 ETH 来部署你的合约，在技术上，部署智能合约是一项交易，所以需要支付 Gas Fee，就像为以太坊转账一样，需要消耗 Gas 一样。但是，部署合约需要消耗更多的 Gas</p><h1 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h1><ul><li><a class="link"   href="https://ethereum.org/zh/developers/docs/smart-contracts/languages/" >Solidity<i class="fas fa-external-link-alt"></i></a>：类 JavaScript 语言</li><li><a class="link"   href="https://ethereum.org/zh/developers/docs/smart-contracts/languages/" >Vyper<i class="fas fa-external-link-alt"></i></a>：类 Python 语言</li></ul><h1 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h1><p>智能合约本身无法获取关于“真实世界”的事件信息，因为他们无法发送 HTTP 请求，这样设计是因为依赖于外部信息可能会危及共识，这对安全性和去中心化而言非常重要。</p><p>而需要获取外部信息，可以通过<a class="link"   href="https://www.notion.so/Oracle-3789d59c7aaa4e47aada5cc879cc1657?pvs=21" >预言机<i class="fas fa-external-link-alt"></i></a>实现</p><p>智能合约可以简单理解为可执行的公开透明的程序，被开发者部署到以太坊区块链上，与外界完全隔离并运行与以太坊虚拟机（EVM），这样就脱离了认为干预，完全只按照代码设定的规则运行</p><p>区块链技术的出现不仅解决了该概念里最重要的合约对货币的百分之百的控制权，并且可编程的优势又让他秒杀了一切传统合约，而区块链的去中心化、不可篡改、过程透明可追踪等优点，更是令智能合约如虎添翼，一飞冲天。</p><p>智能合约是纯正且原生的区块链技术，它符合我们对于区块链价值观的所有期望</p>]]></content>
    
    
      
      
    <summary type="html">&lt;aside&gt;
💡 智能合约是部署在链上的，具有公开透明，不可篡改的特性
&lt;/aside&gt;

&lt;p&gt;智能合约是一种运行在以太坊链上的程序，它是位于以太坊区块链上的一个特定地址的一系列代码（函数）和数据（状态）。智能合约也是一个以太坊账户，我们称之为合约账户，这意味着它有余额，可</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Token(通证)</title>
    <link href="https://wangjplancelote.github.io/2024/03/26/token/"/>
    <id>https://wangjplancelote.github.io/2024/03/26/token/</id>
    <published>2024-03-26T07:45:52.283Z</published>
    <updated>2024-03-26T07:46:24.572Z</updated>
    
    <content type="html"><![CDATA[<p>Web3 中的 Token 的作用：</p><ul><li>代币：ERC20 类型的通证基本都属于这种类型，可用于众筹，债券发行，商品与服务的买卖，其总市值代表一个项目的总资产合总价值</li><li>金融工具与金融衍生品</li><li>所有权令牌：ERC721 代币属于这种类型</li><li>激励工具：如比特币</li><li>安全保障手段：如比特币、ETH</li><li>投票权：如 EOS</li><li>股权证书</li><li>门票或通行证</li><li>自治组织(DAO)的治理工具</li></ul><p>什么是同质化和非同质化通证呢</p><p>同质化：具有相同的某种特质或某个种类，那么就会认为是同质化的，每个个体之间没有差别，每个个体之间的价值完全相同，可以互相交换，如代币之间就属于同质化通证</p><p>非同质化：不同物品之间具有独特、不可替代、不可互换这些特性的话，就满足了非同质化通证的特点，如艺术作品、人、游戏角色、房产等</p><h2 id="以太坊不同通证的标准"><a href="#以太坊不同通证的标准" class="headerlink" title="以太坊不同通证的标准"></a>以太坊不同通证的标准</h2><table><thead><tr><th>ERC20</th><th>可替换资产的原始代币合约</th></tr></thead><tbody><tr><td>ERC-165</td><td>创建标准方法以发布和检测只能合约的借口</td></tr><tr><td>ERC-173</td><td>合同所有权的标准接口</td></tr><tr><td>ERC-223</td><td>向后兼容 ERC-20，保护投资者以防意外的转账</td></tr><tr><td>ERC-721</td><td>非同质化代币(NFTs)标准，可作为产权进行交易</td></tr><tr><td>ERC-725</td><td>密钥管理和执行的代理合同，简历区块链身份</td></tr><tr><td>ERC-777</td><td>基于操作者的代币标准，具有高度可定制性</td></tr><tr><td>ERC-809</td><td>非同质化的租赁标准，用户可使用一系列指令来出租 NFTs</td></tr><tr><td>ERC-827</td><td>允许转让通证并允许持有人允许第三方使用通证</td></tr><tr><td>ERC-864</td><td>NFTs 共有产权，旨在 NFT 合约中分享 NFT 的所有权</td></tr><tr><td>ERC-865</td><td>此项标准允许用户委托第三方帮忙转账，并以代币形式支付 Gas 费用</td></tr><tr><td>ERC-918</td><td>可开采性代币，允许加入挖矿算法</td></tr><tr><td>ERC-874</td><td>加权的不可替代代币，便于了解到独特的资产拥有的价值</td></tr><tr><td>ERC-888</td><td>多维代币标准，使用标识符代表余额和数据</td></tr><tr><td>ERC-998</td><td>可拆解非同质化代币，可包含多个 ERC-721 和 ERC-20 的形式</td></tr><tr><td>ERC-1067</td><td>可升级代币合约的标准，提供代币在合约在内的多种用途的事件锁仓功能</td></tr><tr><td>ERC-1132</td><td>代币锁定能力的标准，提供代币在合约多种用途的事件锁仓功能</td></tr><tr><td>ERC-1155</td><td>多代币标准，可追踪多个代币余额和所有权的合约，及定义多个物品</td></tr><tr><td>ERC-1178</td><td>多级别代币的标准，为多个级别的代币的合约提供标准接口</td></tr><tr><td>ERC-1190</td><td>非同质化版税代币标准，可向创造者以及&#x2F;或者所有者支付版税</td></tr><tr><td>ERC-1203</td><td>多层级代币标准，提供多层级代币合约的标准接口</td></tr><tr><td>ERC-1238</td><td>不可转账代币标准，代表徽章的不可转账代币</td></tr><tr><td>ERC-1400</td><td>证券通证标准，部分可互换代币，该 EIP 标准具有能力进行强制转移</td></tr><tr><td>ERC-1404</td><td>为证券通证、通证化证券以及其他携带复杂要求的其他通证儿准备</td></tr><tr><td>ERC-2612</td><td>该标准可以取消 ERC-20 的 approve + transform，同时海允许无 Gas 通证转账</td></tr><tr><td>Minime Token</td><td>带更多功能的 ERC-20 代币（易克隆），获得余额转账历史及代币控制</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Web3 中的 Token 的作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代币：ERC20 类型的通证基本都属于这种类型，可用于众筹，债券发行，商品与服务的买卖，其总市值代表一个项目的总资产合总价值&lt;/li&gt;
&lt;li&gt;金融工具与金融衍生品&lt;/li&gt;
&lt;li&gt;所有权令牌：ERC721 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>GameFi(Defi的游戏化)</title>
    <link href="https://wangjplancelote.github.io/2024/03/26/GameFi/"/>
    <id>https://wangjplancelote.github.io/2024/03/26/GameFi/</id>
    <published>2024-03-26T07:13:35.915Z</published>
    <updated>2024-03-26T07:13:35.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么都没留下"><a href="#什么都没留下" class="headerlink" title="什么都没留下"></a>什么都没留下</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么都没留下&quot;&gt;&lt;a href=&quot;#什么都没留下&quot; class=&quot;headerlink&quot; title=&quot;什么都没留下&quot;&gt;&lt;/a&gt;什么都没留下&lt;/h2&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Farm(耕种)</title>
    <link href="https://wangjplancelote.github.io/2024/03/26/farm/"/>
    <id>https://wangjplancelote.github.io/2024/03/26/farm/</id>
    <published>2024-03-26T07:13:35.915Z</published>
    <updated>2024-03-26T07:13:35.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Yield-Farming-流动性挖矿-Yield-收益-Farm-耕种-，指将资金投入到不同的Defi协议中赚取回报"><a href="#Yield-Farming-流动性挖矿-Yield-收益-Farm-耕种-，指将资金投入到不同的Defi协议中赚取回报" class="headerlink" title="Yield Farming(流动性挖矿) [  Yield(收益), Farm(耕种)，指将资金投入到不同的Defi协议中赚取回报 ]"></a>Yield Farming(流动性挖矿) [  Yield(收益), Farm(耕种)，指将资金投入到不同的Defi协议中赚取回报 ]</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Yield-Farming-流动性挖矿-Yield-收益-Farm-耕种-，指将资金投入到不同的Defi协议中赚取回报&quot;&gt;&lt;a href=&quot;#Yield-Farming-流动性挖矿-Yield-收益-Farm-耕种-，指将资金投入到不同的Defi协议中赚取回报&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Lend(借贷)</title>
    <link href="https://wangjplancelote.github.io/2024/03/26/lend/"/>
    <id>https://wangjplancelote.github.io/2024/03/26/lend/</id>
    <published>2024-03-26T07:13:35.915Z</published>
    <updated>2024-03-26T07:13:35.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么都没留下"><a href="#什么都没留下" class="headerlink" title="什么都没留下"></a>什么都没留下</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么都没留下&quot;&gt;&lt;a href=&quot;#什么都没留下&quot; class=&quot;headerlink&quot; title=&quot;什么都没留下&quot;&gt;&lt;/a&gt;什么都没留下&lt;/h2&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Oracle(预言机)</title>
    <link href="https://wangjplancelote.github.io/2024/03/26/oracle/"/>
    <id>https://wangjplancelote.github.io/2024/03/26/oracle/</id>
    <published>2024-03-26T07:13:35.915Z</published>
    <updated>2024-03-26T07:45:02.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="预言机-Oracle"><a href="#预言机-Oracle" class="headerlink" title="预言机(Oracle)"></a>预言机(Oracle)</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">什么是预言机？</span><br></pre></td></tr></table></figure><p>预言机是指数据馈送，它提取区块链数据源（下链）的数据并将数据存放到区块链（上链）上供智能合约使用。因为运行在以太坊上的智能合约无法访问存储在区块链网络之外的信息，预言机是必不可上的。</p><p>预言的意思（Oracle）是指古希腊神话中的神谕，由神或者女祭司发表的预言或指示，因此，这里将外部数据引入区块链的机制被称为 Oracle，即预言机</p><p>预言机赋予了智能合约使用链下数据输入执行的能力，扩展了去中心化应用的价值，例如，去中心化预测市场依靠预言机提供的关于结果的信息，并且能够使用这些信息验证用户的预测。假设 A 下注了 20 个以太币赌谁将成为下一任美国总统，这种情况，链上的数据中是没有关于下一任总统的信息的，预测市场去中心化应用程序需要预言机来确认选举结果，并判定 A 是否有资格获得赌注</p><p>区块链预言机获取验证外部信息（即存储在链下的信息）并将外部信息传送给区块链上运行的智能合约的应用程序。除了拉取链下数据用户并在以太坊进行广播之外，预言机还将信息从区块链推送到外部系统，用户通过以太坊交易发送费用后解锁智能锁的预言机就是一个推送信息的示例。</p><p>预言机充当了一座桥梁，链接区块链上的智能合约与链下数据提供者，如果没有预言机，智能合约智能访问链上的数据，预言机提供了一种使用链下数据处罚智能合约的功能机制。</p><p>预言机的分类：</p><ul><li>数据来源（一种或多种）</li><li>信任模型（中心化&#x2F;去中心化）</li><li>系统架构（立即读取或发布订阅）</li><li>是否检索外部数据供链上合约使用（输入预言机）</li><li>是否将区块量的信息发送给链下应用程序（输出预言机）</li><li>在链下执行计算任务（计算预言机）</li></ul><h2 id="预言机解决了什么问题"><a href="#预言机解决了什么问题" class="headerlink" title="预言机解决了什么问题"></a>预言机解决了什么问题</h2><p>智能合约不仅仅只是作为区块链特定地址运行的代码段，更广义来说，智能合约是指满足特定条件后能够执行各方之间协议的<strong>自执行软件程序</strong></p><p>但是问题也在于此，因为以太坊是确定性系统，确定性系统是指在给定初始状态和特定输入时总是产生相同结果的系统，即在使用输入计算输出的过程中不存在随机性和变化</p><p>要实现确定性执行，区块链节点限制为通过仅使用存储在区块链本身中的数据就简单的二进制(true&#x2F;false)问题达成共识，这类问题的示例包括：</p><ul><li>账户所有者（由公钥识别）是否使用配对私钥签署该交易</li><li>该账户是否有足够资金支付这笔交易</li><li>这笔交易在该智能合约中是否有效</li></ul><p>如果区块链从外部来源（现实世界）接受信息，确定性将不可能实现，阻止节点就区块链状态变化的有效性达成一致，以一个智能合约为例，该合约根据从一个传统价格应用程序接口获得的当前的以太币-美元（ETH&#x2F;USDT）汇率窒执行交易。该汇率会经常变动，甚至会被弃用会黑客攻击，这意味着执行相同合约代码的节点会得出不同的结果</p><p>全球会数千个节点处理交易的公共区块链，如以太坊，确定性至关重要，由于没有中心化阻止作为真实性来源，期望节点在进行相同交易后达到相同状态。节点 A 执行智能合约的代码得到结果“3”，而 B 节点运行相同交易后得到“7”，这将打破共识并消除以太坊作为去中心化计算平台的价值。</p><p>以上就是<strong>区块链从外部来源获取信息的问题</strong></p><p>预言机解决了这一问题，它从链下来源获取信息并存储在区块链上供智能合约使用。由于存储在链上的信息是不可更改和公共可用的，以太坊节点可以安全地使用预言机导入的链下数据计算状态变化。</p><p>为此，预言机通常由链上运行的智能合约和一些链下组件构成。链上合约接收其他智能合约的数据请求，并将这些请求传送给链下组件（称为预言机节点）。这类预言机节点可以查询数据源-例如使用 API 并发送交易将请求的数据存储在智能合约的存储中。</p><p>总结就是：预言机弥合了区块链和外部环境（如真实世界）的信息缺口，创建了混合智能合约，原理是基于链上合约代码和链下基础设施的结合。</p><h2 id="什么是预言机问题"><a href="#什么是预言机问题" class="headerlink" title="什么是预言机问题"></a>什么是预言机问题</h2><p>如何依赖一个实体或多个实体向区块链引入外部信息（即将信息存储在交易的数据有效负载中），智能合约很容易获取链下数据，但是会有新的问题：</p><ul><li>如何验证注入信息是从正确来源提取的或者未被篡改</li><li>如何确保这些数据始终可用且定期更新。</li></ul><p>重要的是确保来自预言机的数据是正确的，否则智能合约执行会产生错误结果，这是一个<strong>信任</strong>问题</p><p>不同的预言机在解决预言机问题方面采取的方法各不相同，只需要满足以下几点的中几个即可：</p><ul><li><strong>正确性</strong>：预言机不应导致智能合约基于无效的链下数据触发状态变化。因此，预言机必须保证数据的真实性和完整性-真实性是指数据从正确来源获取，完整性是指数据在发送到链上前保持完好无缺。</li><li><strong>可用性</strong>：预言机不应延迟或阻止智能合约执行操作或触发状态变化，该特点要求预言机提供的数据在请求时可用并且不会出现间断。</li><li>激励兼容性：预言机激励链下数据提供者向智能合约提交正确的信息。包括可归因性和问责性，可归因性允许将一条外部信息与其提供者关联起来，问责性指的是数据提供者与提供的信息绑定，这样就可以根据所提供信息的质量对他们进行奖励或惩罚。</li></ul><h2 id="预言机合约"><a href="#预言机合约" class="headerlink" title="预言机合约"></a>预言机合约</h2><p>预言机合约是预言机服务的链上组成部分，它侦听其他合约发出的数据请求，将数据查询转发到预言机及诶单并将返回的数据向客户端合约广播，该合约还可以对返回的数据点进行一些计算，以产生聚合值并发送给请求合约。</p><p>以下是合约示例</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=<span class="number">0.4</span><span class="number">.21</span> &lt;<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Oracle</span> &#123;</span><br><span class="line">  <span class="title class_">Request</span>[] requests; <span class="comment">//list of requests made to the contract</span></span><br><span class="line">  uint currentId = <span class="number">0</span>; <span class="comment">//increasing request id</span></span><br><span class="line">  uint minQuorum = <span class="number">2</span>; <span class="comment">//minimum number of responses to receive before declaring final result</span></span><br><span class="line">  uint totalOracleCount = <span class="number">3</span>; <span class="comment">// Hardcoded oracle count</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// defines a general api request</span></span><br><span class="line">  struct <span class="title class_">Request</span> &#123;</span><br><span class="line">    uint id;                            <span class="comment">//request id</span></span><br><span class="line">    string urlToQuery;                  <span class="comment">//API url</span></span><br><span class="line">    string attributeToFetch;            <span class="comment">//json attribute (key) to retrieve in the response</span></span><br><span class="line">    string agreedValue;                 <span class="comment">//value from key</span></span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">uint</span> =&gt;</span> string) answers;     <span class="comment">//answers provided by the oracles</span></span><br><span class="line">    <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> uint) quorum;    <span class="comment">//oracles which will query the answer (1=oracle hasn&#x27;t voted, 2=oracle has voted)</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//event that triggers oracle outside of the blockchain</span></span><br><span class="line">  event <span class="title class_">NewRequest</span> (</span><br><span class="line">    uint id,</span><br><span class="line">    string urlToQuery,</span><br><span class="line">    string attributeToFetch</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">//triggered when there&#x27;s a consensus on the final result</span></span><br><span class="line">  event <span class="title class_">UpdatedRequest</span> (</span><br><span class="line">    uint id,</span><br><span class="line">    string urlToQuery,</span><br><span class="line">    string attributeToFetch,</span><br><span class="line">    string agreedValue</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">createRequest</span> (</span><br><span class="line">    string memory _urlToQuery,</span><br><span class="line">    string memory _attributeToFetch</span><br><span class="line">  )</span><br><span class="line">  public</span><br><span class="line">  &#123;</span><br><span class="line">    uint length = requests.<span class="title function_">push</span>(<span class="title class_">Request</span>(currentId, _urlToQuery, _attributeToFetch, <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="title class_">Request</span> storage r = requests[length-<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hardcoded oracles address</span></span><br><span class="line">    r.<span class="property">quorum</span>[<span class="title function_">address</span>(<span class="number">0x6c2339b46F41a06f09CA0051ddAD54D1e582bA77</span>)] = <span class="number">1</span>;</span><br><span class="line">    r.<span class="property">quorum</span>[<span class="title function_">address</span>(<span class="number">0xb5346CF224c02186606e5f89EACC21eC25398077</span>)] = <span class="number">1</span>;</span><br><span class="line">    r.<span class="property">quorum</span>[<span class="title function_">address</span>(<span class="number">0xa2997F1CA363D11a0a35bB1Ac0Ff7849bc13e914</span>)] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// launch an event to be detected by oracle outside of blockchain</span></span><br><span class="line">    emit <span class="title class_">NewRequest</span> (</span><br><span class="line">      currentId,</span><br><span class="line">      _urlToQuery,</span><br><span class="line">      _attributeToFetch</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// increase request id</span></span><br><span class="line">    currentId++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//called by the oracle to record its answer</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">updateRequest</span> (</span><br><span class="line">    uint _id,</span><br><span class="line">    string memory _valueRetrieved</span><br><span class="line">  ) public &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Request</span> storage currRequest = requests[_id];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//check if oracle is in the list of trusted oracles</span></span><br><span class="line">    <span class="comment">//and if the oracle hasn&#x27;t voted yet</span></span><br><span class="line">    <span class="keyword">if</span>(currRequest.<span class="property">quorum</span>[<span class="title function_">address</span>(msg.<span class="property">sender</span>)] == <span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//marking that this address has voted</span></span><br><span class="line">      currRequest.<span class="property">quorum</span>[msg.<span class="property">sender</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//iterate through &quot;array&quot; of answers until a position if free and save the retrieved value</span></span><br><span class="line">      uint tmpI = <span class="number">0</span>;</span><br><span class="line">      bool found = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">while</span>(!found) &#123;</span><br><span class="line">        <span class="comment">//find first empty slot</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_">bytes</span>(currRequest.<span class="property">answers</span>[tmpI]).<span class="property">length</span> == <span class="number">0</span>)&#123;</span><br><span class="line">          found = <span class="literal">true</span>;</span><br><span class="line">          currRequest.<span class="property">answers</span>[tmpI] = _valueRetrieved;</span><br><span class="line">        &#125;</span><br><span class="line">        tmpI++;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      uint currentQuorum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//iterate through oracle list and check if enough oracles(minimum quorum)</span></span><br><span class="line">      <span class="comment">//have voted the same answer has the current one</span></span><br><span class="line">      <span class="keyword">for</span>(uint i = <span class="number">0</span>; i &lt; totalOracleCount; i++)&#123;</span><br><span class="line">        bytes memory a = <span class="title function_">bytes</span>(currRequest.<span class="property">answers</span>[i]);</span><br><span class="line">        bytes memory b = <span class="title function_">bytes</span>(_valueRetrieved);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_">keccak256</span>(a) == <span class="title function_">keccak256</span>(b))&#123;</span><br><span class="line">          currentQuorum++;</span><br><span class="line">          <span class="keyword">if</span>(currentQuorum &gt;= minQuorum)&#123;</span><br><span class="line">            currRequest.<span class="property">agreedValue</span> = _valueRetrieved;</span><br><span class="line">            emit <span class="title class_">UpdatedRequest</span> (</span><br><span class="line">              currRequest.<span class="property">id</span>,</span><br><span class="line">              currRequest.<span class="property">urlToQuery</span>,</span><br><span class="line">              currRequest.<span class="property">attributeToFetch</span>,</span><br><span class="line">              currRequest.<span class="property">agreedValue</span></span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>预言机的节点的常见任务是，想 api 发送请求，解析响应以提取相关数据，设置为区块链可读的输出格式，并通过将输入包含在预言机合约的交易中将其发送到链上，在利用“真实性证明”证明所提交信息的有效性和完整性时，可能也会用到预言机节点。</p><p>预言机类型：</p><ul><li>中心化预言机，由单体控制，该实体负责聚合链下信息并按照请求更新预言机合约的数据，中心化预言机效率高，因为他们依赖单一真实性来源，在专有数据集由所有者直接发布且有公认签名的情况下，中心化预言机可能是更好的选择。但是存在低正确性保障和可用性差的问题，中心化预言机的提供者如何关闭服务或者遭遇了黑客的攻击的话，智能合约会面临 Dos 攻击的风险</li><li>去中心化预言机，会尝试不同的方法实现数据的正确性，其中包括使用证明来证明返回信息的真实性和完整性。</li></ul><h2 id="预言机的应用"><a href="#预言机的应用" class="headerlink" title="预言机的应用"></a>预言机的应用</h2><ul><li>检索金融数据<br>DeFi 应用允许 p2p 贷款，借贷和资产交易，需要获取不同的金融信息，包括汇率数据的资本市场数据，常用的如：Chainlink price Feeds、Compound Protocol 的<a class="link"   href="https://docs.compound.finance/v2/prices/" >开放式喂价工具<i class="fas fa-external-link-alt"></i></a>、Uniswap 的<a class="link"   href="https://docs.uniswap.org/contracts/v2/concepts/core-concepts/oracles" >时间加权平均价格(TWAP)<i class="fas fa-external-link-alt"></i></a></li><li>生成可验证的随机性<br>某些区块链的应用程序（如基于区块链的游戏或彩票方案），需要高度的不可预测性和随机性才能工作，然而，区块链的确定性执行消除了任何随机来源<br>通常方法是伪随机密码函数，例如 blockhash，但是以太坊过渡到权益证明意味着不能再依靠 blockhash 获得链上随机性。可以在链下生成随机值并发送到链上，但这样做对用户有很高的信任要求，他们必须相信值确实是通过不可预测的机制产生的，并且在传输过程中未被改动。<br>计算预言机则可以解决这一问题，可以安全的生成链下随机结果并连同证实该过程不可预测性的加密证明一起在链上广播。</li><li>获取事件结果<br>预言机可以创建响应真实事件的智能合约，预言机服务可以允许合约通过链下组件连接到外部应用程序接口并使用来自这些数据源的信息。</li><li>智能合约自动化</li></ul><h2 id="预言机应用"><a href="#预言机应用" class="headerlink" title="预言机应用"></a>预言机应用</h2><ul><li><a class="link"   href="https://chain.link/" >Chainlink<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://witnet.io/" >Witnet<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://uma.xyz/" >UMA 预言机<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://tellor.io/" >Tellor<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://bandprotocol.com/" >Band Protocol<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://provable.xyz/" >Provable<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://paralink.network/" >Paralink<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://dos.network/" >Dos.Network<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://pyth.network/" >Pyth<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;预言机-Oracle&quot;&gt;&lt;a href=&quot;#预言机-Oracle&quot; class=&quot;headerlink&quot; title=&quot;预言机(Oracle)&quot;&gt;&lt;/a&gt;预言机(Oracle)&lt;/h1&gt;&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Liquidity(流动性)</title>
    <link href="https://wangjplancelote.github.io/2024/03/26/liquidity/"/>
    <id>https://wangjplancelote.github.io/2024/03/26/liquidity/</id>
    <published>2024-03-26T07:13:35.915Z</published>
    <updated>2024-03-26T07:13:35.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么都没留下"><a href="#什么都没留下" class="headerlink" title="什么都没留下"></a>什么都没留下</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么都没留下&quot;&gt;&lt;a href=&quot;#什么都没留下&quot; class=&quot;headerlink&quot; title=&quot;什么都没留下&quot;&gt;&lt;/a&gt;什么都没留下&lt;/h2&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Stake(质押)</title>
    <link href="https://wangjplancelote.github.io/2024/03/26/stake/"/>
    <id>https://wangjplancelote.github.io/2024/03/26/stake/</id>
    <published>2024-03-26T07:13:35.915Z</published>
    <updated>2024-03-26T07:13:35.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么都没留下"><a href="#什么都没留下" class="headerlink" title="什么都没留下"></a>什么都没留下</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么都没留下&quot;&gt;&lt;a href=&quot;#什么都没留下&quot; class=&quot;headerlink&quot; title=&quot;什么都没留下&quot;&gt;&lt;/a&gt;什么都没留下&lt;/h2&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>区块链钱包</title>
    <link href="https://wangjplancelote.github.io/2024/03/26/wallet/"/>
    <id>https://wangjplancelote.github.io/2024/03/26/wallet/</id>
    <published>2024-03-26T07:13:35.915Z</published>
    <updated>2024-03-26T07:13:35.915Z</updated>
    
    <content type="html"><![CDATA[<font face="微软雅黑" size="3"><h2 id="什么是区块链钱包"><a href="#什么是区块链钱包" class="headerlink" title="什么是区块链钱包"></a>什么是区块链钱包</h2><p>&emsp;区块链钱包是加密货币应用中必不可少的一部分，也是加密基础设施中最基础的一部分，区块链钱包的存在使得区块链收发资金成为可能。区块链钱包同时也是web3.0的一个重要入口，事实上，<strong>web3的绝大多数应用，必须要连接区块链钱包才能进一步使用</strong></p><h4 id="根据钱包的存储方式划分"><a href="#根据钱包的存储方式划分" class="headerlink" title="根据钱包的存储方式划分"></a>根据钱包的存储方式划分</h4><p>&emsp;根据用户是否掌握了私钥，可分为<strong>中心化钱包</strong> 和 <strong>去中心化钱包</strong></p><blockquote><blockquote><p>存储方式是指存在哪，只有用户持有私钥且导入钱包后，私钥存在用户设备上后才叫<strong>中心化钱包</strong>，中心化钱包的数据依赖于服务商自己的账本，交易所就是一个典型的中心化钱包，在交易所内完成的交易，就是交易所在自己的账本上增加记录，这个过程，没有发生在链上。<br>&emsp;而无私钥，或者私钥存储在服务商的服务器里，则就是<strong>去中心化钱包</strong>，</p></blockquote></blockquote><h4 id="根据是否接触网络"><a href="#根据是否接触网络" class="headerlink" title="根据是否接触网络"></a>根据是否接触网络</h4><p>&emsp;钱包是否联网可分为<strong>冷钱包</strong> 和 <strong>热钱包</strong></p><blockquote><blockquote><p>常见的热钱包指的是桌面钱包: 如 <strong>比特币核心钱包</strong>、<strong>Geth</strong>, 手机钱包，<strong>imToken</strong>、<strong>TpToken</strong>等，以及网页钱包, 如 <strong>metamask</strong> ,而冷钱包指的是硬件钱包，无需联网即可使用，冷钱包外形像U盘。</p></blockquote></blockquote><h4 id="根据去中心化程度"><a href="#根据去中心化程度" class="headerlink" title="根据去中心化程度"></a>根据去中心化程度</h4><p>&emsp;可将钱包分为<strong>全节点钱包</strong>、<strong>轻节点钱包</strong>、<strong>中心化钱包</strong></p><blockquote><blockquote><p>全节点钱包：完整储存了区块链一切买卖数据的区块链钱包，一般作为官方钱包与节点客户端运用，能够追溯数字财产的来历，验证数字财产的真实性、验证区块链上的买卖是否完成等，由于全节点钱包存储的数据巨大，且数据需要和区块链同步，因此实用性依赖于具体场景。<br>轻节点钱包：没有彻底存储区块链买卖节点的数据钱包，由于数据不完整，只保留了区块链钱包的基本功能，即接入功能和买卖验证功能，轻钱包所有的功能都是为了支持交易的成功进行，市面上常见的app钱包都是轻钱包：<strong>AToken</strong>、<strong>myToken</strong>、<strong>Kcash</strong>等.</p></blockquote></blockquote><h4 id="根据是否支持多币种"><a href="#根据是否支持多币种" class="headerlink" title="根据是否支持多币种"></a>根据是否支持多币种</h4><p>&emsp;钱包是否支持多币种可分为 <strong>单币种钱包</strong> 和 <strong>多币种钱包</strong></p><blockquote><blockquote><p>单一币种钱包：只为单一区块链资产服务的钱包，也叫主链钱包，一般由项目方或社区开发。<br>多币种钱包：支持多个区块链的数字资产，<br>全币种钱包：支持所有区块链资产，目前全币种钱包很难存在，这意味该钱包需要支持所有类型区块链协议。<br>市场上的多币种钱包已成为主流。<br><strong>imToken</strong> 是依据单ETH主链的多币种钱包，仅支持以ETH协议开发的token。<br><strong>EOSToken</strong> 是以EOS主链的钱包, 仅支持EOS协议开发.</p></blockquote></blockquote><h4 id="根据私钥签名方法可分为单签名钱包和多签名钱包"><a href="#根据私钥签名方法可分为单签名钱包和多签名钱包" class="headerlink" title="根据私钥签名方法可分为单签名钱包和多签名钱包"></a>根据私钥签名方法可分为单签名钱包和多签名钱包</h4><blockquote><blockquote><p>单签名钱包，由单个私钥签名的钱包<br>多签名钱包，需要不同私钥签名进行使用的钱包，一般用于共同管理账户，<br>大多数区块链钱包App都是单签名钱包，Gnosis则是多签名钱包。</p></blockquote></blockquote><h3 id="区块链钱包的设计原理"><a href="#区块链钱包的设计原理" class="headerlink" title="区块链钱包的设计原理"></a>区块链钱包的设计原理</h3><ul><li>私钥、公钥和地址产生的方法<blockquote><p>&emsp; 1.比特币私钥其实是使用SHA-256生成的32字节（256位）的随机数，有效私钥的范围则取决于比特币使用的secp256k1 椭圆曲线数字签名标准。<br>&emsp; 2.在私钥的前面加上版本号，后面添加压缩标志和附加校验码，（所谓附加校验码，就是对私钥经过2次SHA-256运算，取两次哈希结果的前四字节），然后再对其进行Base58编码，就可以得到我们常见的WIF（Wallet import Format)格式的私钥。<br>&emsp; 3.私钥经过椭圆曲线乘法运算，可以得到公钥。公钥是椭圆曲线上的点，并具有x和y坐标。公钥有两种形式：压缩的与非压缩的。早期比特币均使用非压缩公钥，现在大部分客户端默认使用压缩公钥。<br>&emsp; 从私钥推导出公钥、再从公钥推导出公钥哈希都是单向的，也就是<strong>采用不可逆算法</strong></p></blockquote></li></ul><p><strong><em>椭圆曲线算法</em></strong></p><blockquote><blockquote><p>&emsp; 4.公钥产生后，将公钥通过SHA256哈希算法处理得到32字节的哈希值；后对得到的哈希值通过RIPEMD-160算法来得到20字节的哈希值 ——Hash160<br>&emsp; 5.把版本号[2]+Hash160组成的21字节数组进行双次SHA256哈希运算，得到的哈希值的头4个字节作为校验和，放置21字节数组的末尾。<br>&emsp; 6.对组成25位数组进行Base58编码，最后得到地址。</p></blockquote></blockquote><ul><li><h2 id="使用区块链API进行远程调用-常见的一些钱包开源项目："><a href="#使用区块链API进行远程调用-常见的一些钱包开源项目：" class="headerlink" title="使用区块链API进行远程调用&gt;&gt;常见的一些钱包开源项目："></a>使用区块链API进行远程调用<br>&gt;&gt;常见的一些钱包开源项目：</h2><h2 id="bitcoin-Bitcoin-Core，官方出品bitcoinj，比特币协议-Java-版bither，简单安全的比特币钱包Electrum，全平台轻钱包bread，iOS-钱包Mycelium，Android-钱包Copay，同时支持-Bitcoin-和BitcoinCashbitcoin-wallet，又一款-Android-钱包DotNetWallet，-NET-实现的钱包Coinpunk，基于浏览器的钱包btcwallet，Go-实现的钱包"><a href="#bitcoin-Bitcoin-Core，官方出品bitcoinj，比特币协议-Java-版bither，简单安全的比特币钱包Electrum，全平台轻钱包bread，iOS-钱包Mycelium，Android-钱包Copay，同时支持-Bitcoin-和BitcoinCashbitcoin-wallet，又一款-Android-钱包DotNetWallet，-NET-实现的钱包Coinpunk，基于浏览器的钱包btcwallet，Go-实现的钱包" class="headerlink" title="[bitcoin]Bitcoin Core，官方出品bitcoinj，比特币协议 Java 版bither，简单安全的比特币钱包Electrum，全平台轻钱包bread，iOS 钱包Mycelium，Android 钱包Copay，同时支持 Bitcoin 和BitcoinCashbitcoin-wallet，又一款 Android 钱包DotNetWallet，.NET 实现的钱包Coinpunk，基于浏览器的钱包btcwallet，Go 实现的钱包"></a>[<em>bitcoin</em>]<br><strong>Bitcoin Core</strong>，官方出品<br><strong>bitcoinj</strong>，比特币协议 Java 版<br><strong>bither</strong>，简单安全的比特币钱包<br><strong>Electrum</strong>，全平台轻钱包<br><strong>bread，iOS</strong> 钱包<br><strong>Mycelium，Android</strong> 钱包<br><strong>Copay</strong>，同时支持 Bitcoin 和BitcoinCash<br><strong>bitcoin-wallet</strong>，又一款 Android 钱包<br><strong>DotNetWallet</strong>，.NET 实现的钱包<br><strong>Coinpunk</strong>，基于浏览器的钱包<br><strong>btcwallet</strong>，Go 实现的钱包</h2><p>[<em>Ethereum&#x2F;ERC20</em>]<br><strong>go-ethereum</strong>，以太坊协议 Go 版<br><strong>Mist</strong>，官方出品<br><strong>Parity</strong>，支持 Windows、Mac、PC 的钱包<br><strong>MetaMask</strong> chrome浏览器eth wallet插件<br><strong>MyEtherWallet</strong>，基于浏览器的钱包<br><strong>eth-lightwallet</strong>，轻量级 JavasSript 版本钱包<br><strong>ethaddress.org</strong>，纸质版钱包生成器<br><strong>Neureal wallet</strong>，支持 Windows、Mac、PC 的钱包</p></li><li><p>钱包设计：助记词、keystore、密码</p><blockquote><blockquote><p>私钥一般太难记忆了，使用也不方便，所以从钱包设计的角度，就为简化操作同时不丢失安全性，就出现了助记词的方法。<br>一般情况下，助记词由一些单词组成，只要你记住这些单词，按照顺序在钱包中输入，也能打开钱包。<br>根据密钥之间是否有关联，将钱包分为 <em>nondeterministic wallet</em> 和 <em>deterministic wallet</em><br><em>nondeterministic wallet</em>: 密钥对之间没有关联。<br><em>deterministic wallet</em>： 密钥由一个原始的种子主密钥推导而来，常见的推导方式就是树状层级推导，(hierarchical deterministic) 简称HD<br>deterministic wallet 基于BIP32标准实现，通过一个共同的种子维护多对私钥，推导私钥的过程采用不可逆哈希算法，</p></blockquote></blockquote></li></ul><p><em><strong>生成助记词</strong></em></p><blockquote><p>规定熵的位数必须是 32 的整数倍，所以熵的长度取值位128 到 256 之间取 32 的整数倍的值，分别为 128, 160, 192, 224, 256；<br>校验和的长度为熵的长度&#x2F;32 位, 所以校验和长度可为 4，5，6，7，8 位；<br>助记词库有 2048 个词，用 11 位可全部定位词库中所有的词，作为词的索引，故一个词用 11 位表示，助记词的个数可为 (熵+校验和)&#x2F;11，值为 12，15，18，21，24<br>助记词规则:<br>1.生成一个长度为 128~256 位(bits)的随机序列(熵)；<br>2.取熵哈希后的前n位作为校验和(n&#x3D; 熵长度&#x2F;32)；<br>3.随机序列+校验和；<br>4.把步骤3得到的结果每 11位切割；<br>5.步骤4得到的每11位字节匹配词库的一个词；<br>6.步骤5得到的结果就是助记词串;<br><img   src="/../assets/name.png"  alt="生成助记词"><br>7.助记词句子作为密码；<br>8.”mnemonic” + passphrase 作为盐；<br>9.2048 作为重复计算的次数+HMAC-SHA512 作为随机算法,最终得到BIP32 种子，512 位(64 字节)是期望得到的密钥长度；<br><img   src="/../assets/secret.png"  alt="生成密钥"></p></blockquote><p>除了助记词之外，钱包还会设计一个密码，作为用户常用的登录方式，<br>keystore：Keystore也是私钥经过加密过后的一个文件，需要你自己设置的密码才能打开文件。这样的好处是就算keystore文件被盗，只要你额外设置的密码够长够随机，那么短时间内私钥也不会泄露，有充足的时间转移地址里面的加密货币到其他地址。Keystore会存储在使用的设备里，这样每次登陆只用输入相应密码即可。</p><p><em><strong>总结</strong></em></p><blockquote><p>钱包助记词生成了种子（Seed），种子（Seed）生成了私钥，私钥推导出公钥，公钥节选部分成了钱包地址。同时钱包提供了keystore，他也是私钥加密后的文件，可以配合正常的密码使用，便捷了用户的钱包使用</p></blockquote><p>[<em>私钥重复问题</em>]<br>私钥产生的机制就决定了会有重复的可能。</p><blockquote><p>&emsp; 私钥有32个字节，一个字节有8位，所以私钥总数是2^(8*32)&#x3D;2^256个≈10^77个<br>假设宇宙有一亿个星系，<br>每个星系有一亿颗恒星，<br>每颗恒星有一亿颗人造卫星，<br>每颗人造卫星上有一亿台超级计算机，<br>每台超级计算机有一亿个CPU，<br>每个CPU每秒可以穷举一亿个私钥。<br>假设有一亿个私钥的地址上有BTC（每个地址平均0.21BTC），那么，多久可能穷举出一个有币的私钥为：<br>10^77（私钥总数）&#x2F;10^8（有币私钥）&#x2F;10^8（星系）&#x2F;10^8（恒星）&#x2F;10^8（卫星）&#x2F;10^8（超级计算机）&#x2F;10^8（CPU）&#x2F;10^8（每秒穷举）&#x3D;10^21秒。<br>10^21秒&#x2F;3600秒&#x2F;24小时&#x2F;365天&#x3D;317098亿年<br>随着时间的累积，再加上还会有其他的公链出现，如果使用同样的私钥生成地址的规则，概率再小也会有几率出现重复的情况。但是穷举法的代价已经远远超过了所获利，因此可以理解私钥是唯一的。</p></blockquote><h4 id="理解钱包的作用"><a href="#理解钱包的作用" class="headerlink" title="理解钱包的作用"></a>理解钱包的作用</h4><blockquote><p>完成一次交易之后，钱包里没有币，也没有NFT，钱包里保存的是自己的区块链地址和对这个地址的操作权限，这些我们交易得到的币、NFT、或者其他什么加密资产是被记录在了各个网络上的对应的区块链中。<br>可以说，钱包是区块链的遥控器，创建钱包时，用助记词算出私钥，私钥和公钥配对出现，公钥算出地址，地址就是你在区块链中的账号，助记词可以重新算出私钥，可重置钱包，同时钱包生成的keystore也可以解密后获得私钥，用于重置钱包。<br>私钥的作用是获得对地址的操作权限。钱包地址可以看作区块链上的一个节点。<br>发起交易，是通过私钥授权，对地址对应的数据区块进行修改。<br></font></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;font face=&quot;微软雅黑&quot; size=&quot;3&quot;&gt;

&lt;h2 id=&quot;什么是区块链钱包&quot;&gt;&lt;a href=&quot;#什么是区块链钱包&quot; class=&quot;headerlink&quot; title=&quot;什么是区块链钱包&quot;&gt;&lt;/a&gt;什么是区块链钱包&lt;/h2&gt;&lt;p&gt;&amp;emsp;区块链钱包是加密货币应</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>DeFi(去中心化金融)</title>
    <link href="https://wangjplancelote.github.io/2024/03/26/DeFi/"/>
    <id>https://wangjplancelote.github.io/2024/03/26/DeFi/</id>
    <published>2024-03-26T07:13:35.915Z</published>
    <updated>2024-03-28T02:20:00.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流动性挖矿"><a href="#流动性挖矿" class="headerlink" title="流动性挖矿"></a>流动性挖矿</h1><p>什么是挖矿？</p><p>最初在区块链中的挖矿是指使用计算机硬件（如 CPU、GPU 或专业的 ASIC 矿机）来执行特定的算法计算，以验证和记录区块链网络中的交易，这个过程对于维护区块链的安全性和去中心化至关重要。</p><p><strong>区块链挖矿</strong>主要包括以下几个方面：</p><ul><li>交易验证：矿工通过解决复杂的数学问题来验证新生成的交易块，确保交易的有效性。</li><li>工作量证明：常见的挖矿机制，要求矿工完成一项计算工作，这项工作的难度确保了网络的安全性。矿工必须投入大量的计算资源来解决难题，这个过程被称为“挖矿”</li><li>区块创建：一旦矿工解决了难题，他们就可以创建一个新的区块，并将待验证的交易打包进这个区块。</li><li>区块链接：新区块被添加到现有的区块上，形成新的链条，这个过程称为区块链接</li><li>奖励机制：成功挖矿的矿工会获得新生成的加密货币作为奖励，这是对矿工所投入计算资源电力的补偿。</li></ul><p>以上是作为 POW（工作量证明的挖矿 Proof of Work）的机制</p><p>除此之外，其他的共识机制如 POS（权益证明 Proof of Stake）和 DPOS（委托权益证明 Delegated Proof of Stake）这些不同的挖矿机制，事实上后两者已经不能算作常规意义的挖矿了，只不过延续之前的叫法仍然叫挖矿，后两者的机制有一个更为适合的名字：质押</p><h1 id="流动性挖矿-1"><a href="#流动性挖矿-1" class="headerlink" title="流动性挖矿"></a>流动性挖矿</h1><p>这是一个去中心化金融中的概念（DeFi），流动性挖矿允许用户通过提供资产到特定的流动性池中来赚取奖励。</p><ul><li>流动性池：在 DeFi 中，流动性池是由用户共同出资形成的资产池，用于促进加密货币之间的交易。</li><li>提供流动性：用户向这些流动性池中存入自己的加密货币，从而成为流动性提供者(Liquidity Provider 简称 LP)，用户通过池子维持两者货币的交易流动性，并允许其他用户进行交易</li><li>交易费用：当其他用户在流动性中进行交易时，会生成交易费用，这些费用通常按照流动性提供者存入资产的比例分配给他们，作为提供流动性的奖励。</li><li>额外奖励：除了交易费用之外，一些 DeFi 项目还会通过发放自己的治理代币或者奖励代币来激励流动性提供者。这些代币可能具有价值，并且可以用于项目的治理决策或者在未来获得更多收益。</li><li>风险：尽管流动性挖矿提供了赚取额外收益的机会，但是也伴随着风险，例如：如果流动性池中的资产价格发生大幅波动，可能会导致流动性提供者损失资产（无常损失）</li></ul><p>流动性挖矿有两种模式：Yield Farming 和 Yield Mining</p><ul><li><strong>Farming</strong>：将代币组成交易对存入流动性池中，获得份额，称为 LP，交易者使用资金池产生的交易费用会加入资金池，为每个流动性提供者赚取了手续费，根据份额来分配收益</li><li><strong>Mining</strong>：收益来源来自平台提供而不是手续费，例如平台代币的奖励，提供给 LP，作为收益的补充。</li></ul><h1 id="Stake：质押"><a href="#Stake：质押" class="headerlink" title="Stake：质押"></a>Stake：质押</h1><p>质押指的是存入某种代币 A，随着时间获得新的代币 A 或者另一种代币 B</p><p>和流动性挖矿又一些相同点，都是提供资产来获得收益，这些收益以加密货币的形式发放，两者都是 DeFi 的一部分，</p><ul><li>质押代币需要将代币锁定在钱包或者智能合约中，作为对网络的支持，POS 就是这种方式应用。</li><li>收益来自于网络新新生成的代币和交易费用，质押的收益量按照质押量占总质押量的比例来获得奖励。</li><li>质押会有资产的锁定期限制，锁定期内无法赎回</li><li>质押会影响流动性，除非解锁期结束，否则用户资产一直处于被锁定的状态。</li></ul><h1 id="DEX-的收益获取"><a href="#DEX-的收益获取" class="headerlink" title="DEX 的收益获取"></a>DEX 的收益获取</h1><p>DEX（去中心化交易所）是如何获取收益并将奖励给到 LP（Liquidity Prodiver 流动性提供者）的呢</p><p>在流动性提供者（LP）注入资产到流动性池中后，会获得 DEX 的 LP 代币，这些 LP 代币代表了他们在池中的资产份额，当用户在 DEX 上交易的时候，每一笔交易会产生手续费，无论是用 USDT 买 ETH，还是 ETH 换 USDT，这些手续费就会根据分配方式进行分配：</p><ul><li>LP：根据 LP 的份额，给到流动性提供者收益（流动性挖矿的收益人）</li><li>平台收益：用于一部分的平台治理、运营、开发团队的成本</li><li>流动性挖矿的奖励：除了 LP 的份额之外，还会发放额外的奖励，激励用户提供流动性。</li><li>社区基金：DEX 的社区运营治理也需要一些费用</li><li>捐赠：公益项目</li></ul><h1 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h1><p>DEX 的费率和 CEX 费率相似甚至偏高，那么用户依然选择 DEX 的原因是什么呢</p><p>DEX 的核心优势就是去中心化，这意味着没有中央机构控制交易过程，降低了单点故障的风险，用户直接在区块链上交易；开放与透明，DEX 的智能合约是开源的；最重要的，DEX 提供了流动性挖矿的机会，用户可以提供流动性来获得额外的代币奖励，这也是 CEX 所没有的。</p><p>DEX 支持更广泛的代币和交易对，对于很多还未上交易所的代币而言，DEX 是早期赚取这些有潜力价值巨大的代币的好机会。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;流动性挖矿&quot;&gt;&lt;a href=&quot;#流动性挖矿&quot; class=&quot;headerlink&quot; title=&quot;流动性挖矿&quot;&gt;&lt;/a&gt;流动性挖矿&lt;/h1&gt;&lt;p&gt;什么是挖矿？&lt;/p&gt;
&lt;p&gt;最初在区块链中的挖矿是指使用计算机硬件（如 CPU、GPU 或专业的 ASIC 矿机）来</summary>
      
    
    
    
    
  </entry>
  
</feed>
